{"version":3,"sources":["webpack:///./src/forms/projectForm.js","webpack:///./src/forms/projectContainer.js","webpack:///./src/pages/forms/submitProjectFormPage.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./src/forms/styledForm.js","webpack:///./src/forms/formSubmitAnimation.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/regenerator-runtime/runtime-module.js"],"names":["ProjectForm","render","_this$props","this","props","handleSubmit","errors","touched","isSubmitting","isValid","react_default","a","createElement","styledForm","onSubmit","formik_esm","className","Name_of_project","type","name","required","Email","component","disabled","Component","propTypes","PropTypes","func","isRequired","object","bool","ProjectContainer","_ref","setFormState","setSubmitResponse","initialValues","formName","Short_description","Stakeholder_organization","Community_partners","Industry_partners","Link","Projected_budget","Existing_team","Existing_sponsors","validationSchema","_ref2","asyncToGenerator_default","regenerator_default","mark","_callee","values","actions","response","wrap","_context","prev","next","fetch","method","headers","Content-type","body","JSON","stringify","sent","json","statusCode","resetForm","message","setSubmitting","stop","_x","_x2","apply","arguments","_ref3","projectForm_ProjectForm","SubmitProjectFormPage","layout","seo","title","style","textAlign","formSubmitAnimation","projectContainer","global","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","then","result","done","value","toString","keys","key","push","reverse","length","pop","Context","reset","skipTempReset","_sent","delegate","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function","styled_components__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","formik__WEBPACK_IMPORTED_MODULE_1__","_utilities__WEBPACK_IMPORTED_MODULE_2__","StyledForm","styled","Form","withConfig","componentId","elevation","gray","red","FormSubmitAnimation","submitResponse","formSubmitted","setFormStateTrue","_this","setState","renderResponse","react__WEBPACK_IMPORTED_MODULE_2___default","react_spring_renderprops__WEBPACK_IMPORTED_MODULE_3__","h2","assign","renderForm","children","div","_this2","items","native","from","opacity","height","enter","leave","submitted","asyncGeneratorStep","gen","_next","_throw","args","g","hadRuntime","getOwnPropertyNames","indexOf","oldRuntime","e"],"mappings":"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","file":"component---src-pages-forms-submit-project-form-page-js-723856da41f2c32e52cc.js","sourcesContent":["import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n// import * as yup from 'yup'\nimport StyledForm from './styledForm';\n\nexport default class ProjectForm extends Component {\n  static propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    touched: PropTypes.object.isRequired,\n    isSubmitting: PropTypes.bool,\n    isValid: PropTypes.bool,\n  };\n\n  render() {\n    const { handleSubmit, errors, touched, isSubmitting, isValid } = this.props;\n    return (\n      <StyledForm onSubmit={handleSubmit}>\n        <div>\n          <h3>Project Onboarding Form</h3>\n          <p>Please provide the following information:</p>\n        </div>\n        <label>\n          Project Name:*\n          <Field\n            className={\n              touched.Name_of_project && errors.Name_of_project ? 'invalid' : ''\n            }\n            type=\"text\"\n            name=\"Name_of_project\"\n            required\n          />\n        </label>\n        <label>\n          Email:*\n          <Field\n            className={touched.Email && errors.Email ? 'invalid' : ''}\n            type=\"email\"\n            name=\"Email\"\n            required\n          />\n        </label>\n        <label>\n          Short Description:\n          <Field type=\"text\" name=\"Short_description\" />\n        </label>\n        <label>\n          Stakeholder Organization:\n          <Field type=\"text\" name=\"Stakeholder_organization\" />\n        </label>\n        <label>\n          Community Partners:\n          <Field component=\"textarea\" name=\"Community_partners\" />\n        </label>\n        <label>\n          Industry Partners:\n          <Field component=\"textarea\" name=\"Industry_partners\" />\n        </label>\n        <label>\n          Link to demo:\n          <Field type=\"text\" name=\"Link\" />\n          {/* type url requires \"http\"...  */}\n        </label>\n        <label>\n          Projected Budget:\n          <Field type=\"text\" name=\"Projected_budget\" />\n        </label>\n        <label>\n          Existing Team:\n          <Field component=\"textarea\" name=\"Existing_team\" />\n        </label>\n        <label>\n          Existing Sponsors\n          <Field component=\"textarea\" name=\"Existing_sponsors\" />\n        </label>\n        <button type=\"submit\" disabled={isSubmitting || !isValid}>\n          Submit\n        </button>\n      </StyledForm>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport ProjectForm from './projectForm';\n\nconst ProjectContainer = ({ setFormState, setSubmitResponse }) => {\n  const initialValues = {\n    formName: 'Project_Onboarding_Form', // Must be same as airtable base name\n    Name_of_project: '',\n    Email: '',\n    Short_description: '',\n    Stakeholder_organization: '',\n    Community_partners: '',\n    Industry_partners: '',\n    Link: '',\n    Projected_budget: '',\n    Existing_team: '',\n    Existing_sponsors: '',\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema // currently validated with HTML\n      onSubmit={async (values, actions) => {\n        const response = await (await fetch(\n          '/api/airtable', // path to api proxy\n          {\n            method: 'PATCH',\n            headers: {\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(values),\n          },\n        )).json();\n        if (response.statusCode === 200) {\n          actions.resetForm();\n        }\n        setFormState(true);\n        setSubmitResponse(response.message);\n        actions.setSubmitting(false);\n      }}\n      render={({ touched, errors, isSubmitting, handleSubmit, isValid }) => (\n        <ProjectForm\n          // formik-bag\n          touched={touched}\n          errors={errors}\n          isSubmitting={isSubmitting}\n          handleSubmit={handleSubmit}\n          isValid={isValid}\n        />\n      )}\n    />\n  );\n};\n\nProjectContainer.propTypes = {\n  setFormState: PropTypes.func.isRequired,\n  setSubmitResponse: PropTypes.func.isRequired,\n};\nexport default ProjectContainer;\n","import React from 'react';\n\nimport Layout from '../../components/layout';\nimport SEO from '../../components/seo';\nimport FormSubmitAnimation from '../../forms/formSubmitAnimation';\nimport ProjectContainer from '../../forms/projectContainer';\n\nconst SubmitProjectFormPage = () => (\n  <Layout>\n    <SEO title=\"Submit a Project\" />\n    <h1 style={{ textAlign: 'center' }}>Submit a Project</h1>\n\n    {/* Make choice for intern or pro */}\n    <FormSubmitAnimation>\n      {({ setFormState, setSubmitResponse }) => (\n        <ProjectContainer\n          setFormState={setFormState}\n          setSubmitResponse={setSubmitResponse}\n        />\n      )}\n    </FormSubmitAnimation>\n  </Layout>\n);\n\nexport default SubmitProjectFormPage;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { elevation, gray, red } from '../utilities';\n\nconst StyledForm = styled(Form)`\n  display: grid;\n  max-width: 600px;\n  margin: 0 auto;\n  text-align: center;\n\n  label {\n    max-width: 100%;\n    margin: 0.5rem;\n    text-align: left;\n  }\n  label,\n  input,\n  textarea,\n  button {\n    font-size: 1.25rem;\n  }\n\n  input,\n  textarea {\n    width: 100%;\n    font-family: inherit;\n    padding: 0.5rem;\n    ${elevation[2]};\n    margin-top: 0.25rem;\n  }\n  .select {\n    /* Styles react-select */\n    color: ${gray};\n  }\n  .checkbox-label {\n    display: grid;\n    justify-content: flex-start;\n  }\n  .checkbox {\n    box-shadow: none;\n    transform: scale(1.5);\n  }\n  .invalid {\n    background: #f66;\n  }\n  input:focus {\n    outline-color: ${red};\n  }\n  button {\n    margin: 0 auto;\n    width: 250px;\n    background: #2b2b2b;\n    border: none;\n    height: 3rem;\n    border-radius: 5px;\n    box-shadow: 0px 1px 5px #333;\n    color: white;\n    cursor: pointer;\n    font-family: inherit;\n    transition: 0.2s;\n    :hover {\n      box-shadow: 0px 5px 10px #000;\n      transform: translate(0, -2px);\n    }\n    :disabled {\n      background-color: #aaa;\n    }\n  }\n`;\n\nexport default StyledForm;\n","import React, { Component } from 'react';\nimport { Transition, animated } from 'react-spring/renderprops';\nimport PropTypes from 'prop-types';\n\nclass FormSubmitAnimation extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n  };\n\n  state = {\n    submitResponse: '',\n    formSubmitted: false,\n  };\n\n  setFormStateTrue = () => {\n    this.setState({ formSubmitted: true });\n  };\n\n  setSubmitResponse = submitResponse => {\n    this.setState({ submitResponse });\n  };\n\n  renderResponse = props => {\n    const { submitResponse } = this.state;\n    return (\n      <animated.h2 style={{ textAlign: 'center', ...props }}>\n        {submitResponse}\n      </animated.h2>\n    );\n  };\n\n  renderForm = props => {\n    const { children } = this.props;\n    return (\n      <animated.div style={props}>\n        {children({\n          setFormState: this.setFormStateTrue,\n          setSubmitResponse: this.setSubmitResponse,\n        })}\n      </animated.div>\n    );\n  };\n\n  render() {\n    const { formSubmitted } = this.state;\n    return (\n      <Transition\n        items={formSubmitted}\n        native\n        from={{ opacity: 0, height: 0 }}\n        enter={{ opacity: 1, height: 'auto' }}\n        leave={{ opacity: 0, height: 0 }}\n      >\n        {submitted => (submitted ? this.renderResponse : this.renderForm)}\n      </Transition>\n    );\n  }\n}\n\nexport default FormSubmitAnimation;\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n"],"sourceRoot":""}