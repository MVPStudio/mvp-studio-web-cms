{"version":3,"sources":["webpack:///./src/forms/projectForm.js","webpack:///./src/forms/projectContainer.js","webpack:///./src/pages/forms/submitProjectFormPage.js"],"names":["ProjectForm","render","_this$props","this","props","handleSubmit","errors","touched","isSubmitting","isValid","react_default","a","createElement","styledForm","onSubmit","formik_esm","className","Name_of_project","type","name","required","Email","component","disabled","Component","propTypes","PropTypes","func","isRequired","object","bool","ProjectContainer","_ref","setFormState","setSubmitResponse","initialValues","formName","Short_description","Stakeholder_organization","Community_partners","Industry_partners","Link","Projected_budget","Existing_team","Existing_sponsors","validationSchema","_ref2","asyncToGenerator_default","regenerator_default","mark","_callee","values","actions","response","wrap","_context","prev","next","fetch","method","headers","Content-type","body","JSON","stringify","sent","json","statusCode","resetForm","message","setSubmitting","stop","_x","_x2","apply","arguments","_ref3","projectForm_ProjectForm","SubmitProjectFormPage","layout","seo","title","style","textAlign","formSubmitAnimation","projectContainer"],"mappings":"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","file":"component---src-pages-forms-submit-project-form-page-js-6ead70054f26b09236e8.js","sourcesContent":["import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n// import * as yup from 'yup'\nimport StyledForm from './styledForm';\n\nexport default class ProjectForm extends Component {\n  static propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    touched: PropTypes.object.isRequired,\n    isSubmitting: PropTypes.bool,\n    isValid: PropTypes.bool,\n  };\n\n  render() {\n    const { handleSubmit, errors, touched, isSubmitting, isValid } = this.props;\n    return (\n      <StyledForm onSubmit={handleSubmit}>\n        <div>\n          <h3>Project Onboarding Form</h3>\n          <p>Please provide the following information:</p>\n        </div>\n        <label>\n          Project Name:*\n          <Field\n            className={\n              touched.Name_of_project && errors.Name_of_project ? 'invalid' : ''\n            }\n            type=\"text\"\n            name=\"Name_of_project\"\n            required\n          />\n        </label>\n        <label>\n          Email:*\n          <Field\n            className={touched.Email && errors.Email ? 'invalid' : ''}\n            type=\"email\"\n            name=\"Email\"\n            required\n          />\n        </label>\n        <label>\n          Short Description:\n          <Field type=\"text\" name=\"Short_description\" />\n        </label>\n        <label>\n          Stakeholder Organization:\n          <Field type=\"text\" name=\"Stakeholder_organization\" />\n        </label>\n        <label>\n          Community Partners:\n          <Field component=\"textarea\" name=\"Community_partners\" />\n        </label>\n        <label>\n          Industry Partners:\n          <Field component=\"textarea\" name=\"Industry_partners\" />\n        </label>\n        <label>\n          Link to demo:\n          <Field type=\"text\" name=\"Link\" />\n          {/* type url requires \"http\"...  */}\n        </label>\n        <label>\n          Projected Budget:\n          <Field type=\"text\" name=\"Projected_budget\" />\n        </label>\n        <label>\n          Existing Team:\n          <Field component=\"textarea\" name=\"Existing_team\" />\n        </label>\n        <label>\n          Existing Sponsors\n          <Field component=\"textarea\" name=\"Existing_sponsors\" />\n        </label>\n        <button type=\"submit\" disabled={isSubmitting || !isValid}>\n          Submit\n        </button>\n      </StyledForm>\n    );\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport ProjectForm from './projectForm';\r\n\r\nconst ProjectContainer = ({ setFormState, setSubmitResponse }) => {\r\n  const initialValues = {\r\n    formName: 'Project_Onboarding_Form', // Must be same as airtable base name\r\n    Name_of_project: '',\r\n    Email: '',\r\n    Short_description: '',\r\n    Stakeholder_organization: '',\r\n    Community_partners: '',\r\n    Industry_partners: '',\r\n    Link: '',\r\n    Projected_budget: '',\r\n    Existing_team: '',\r\n    Existing_sponsors: '',\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema // currently validated with HTML\r\n      onSubmit={async (values, actions) => {\r\n        const response = await (await fetch(\r\n          '/api/airtable', // path to api proxy\r\n          {\r\n            method: 'PATCH',\r\n            headers: {\r\n              'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(values),\r\n          },\r\n        )).json();\r\n        if (response.statusCode === 200) {\r\n          actions.resetForm();\r\n        }\r\n        setFormState(true);\r\n        setSubmitResponse(response.message);\r\n        actions.setSubmitting(false);\r\n      }}\r\n      render={({ touched, errors, isSubmitting, handleSubmit, isValid }) => (\r\n        <ProjectForm\r\n          // formik-bag\r\n          touched={touched}\r\n          errors={errors}\r\n          isSubmitting={isSubmitting}\r\n          handleSubmit={handleSubmit}\r\n          isValid={isValid}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nProjectContainer.propTypes = {\r\n  setFormState: PropTypes.func.isRequired,\r\n  setSubmitResponse: PropTypes.func.isRequired,\r\n};\r\nexport default ProjectContainer;\r\n","import React from 'react';\r\n\r\nimport Layout from '../../components/layout';\r\nimport SEO from '../../components/seo';\r\nimport FormSubmitAnimation from '../../forms/formSubmitAnimation';\r\nimport ProjectContainer from '../../forms/projectContainer';\r\n\r\nconst SubmitProjectFormPage = () => (\r\n  <Layout>\r\n    <SEO title=\"Submit a Project\" />\r\n    <h1 style={{ textAlign: 'center' }}>Submit a Project</h1>\r\n\r\n    {/* Make choice for intern or pro */}\r\n    <FormSubmitAnimation>\r\n      {({ setFormState, setSubmitResponse }) => (\r\n        <ProjectContainer\r\n          setFormState={setFormState}\r\n          setSubmitResponse={setSubmitResponse}\r\n        />\r\n      )}\r\n    </FormSubmitAnimation>\r\n  </Layout>\r\n);\r\n\r\nexport default SubmitProjectFormPage;\r\n"],"sourceRoot":""}